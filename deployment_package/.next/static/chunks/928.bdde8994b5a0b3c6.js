"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[928],{928:(e,r,t)=>{t.r(r),t.d(r,{AudioRecorder:()=>s,transcribeAudio:()=>o});var a=t(2046),i=t(4916);async function o(e,r,t){try{let r=new FormData;r.append("audio",e),t&&r.append("sessionId",t);let a=await fetch("/api/whisper",{method:"POST",body:r});if(!a.ok){let e=await a.json();throw Error(e.error||"Failed to transcribe audio")}return(await a.json()).text}catch(e){throw console.error("Error transcribing audio:",e),e}}new a.Ay({apiKey:i.env.OPENAI_API_KEY||"sk-placeholder-key-for-development-only",dangerouslyAllowBrowser:!0});class s{async startRecording(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:!0}),this.mediaRecorder=new MediaRecorder(this.stream),this.audioChunks=[],this.mediaRecorder.addEventListener("dataavailable",e=>{e.data.size>0&&this.audioChunks.push(e.data)}),this.mediaRecorder.start(),console.log("Recording started")}catch(e){throw console.error("Error starting recording:",e),e}}stopRecording(){return new Promise((e,r)=>{if(!this.mediaRecorder){r(Error("No recording in progress"));return}this.mediaRecorder.addEventListener("stop",()=>{this.stream&&(this.stream.getTracks().forEach(e=>e.stop()),this.stream=null),e(new Blob(this.audioChunks,{type:"audio/webm"})),console.log("Recording stopped")}),this.mediaRecorder.stop()})}static isSupported(){return!!(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia)}constructor(){this.mediaRecorder=null,this.audioChunks=[],this.stream=null}}}}]);